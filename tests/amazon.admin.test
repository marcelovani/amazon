<?php

/**
 * @file
 * Node tests for Amazon module.
 */

class AmazonAdminUITest extends AmazonBaseTest {
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'Admin UI',
      'description' => 'Tests for the Admin UI.',
      'group' => 'Amazon',
    );
  }

  protected function setUp($modules = array()) {
    // Enable modules.
    parent::setUp($modules);
  }

  /**
   * Test the field formatters.
   */
  public function testAdminUI() {
    // Login as an admin user.
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/structure/types/manage/article');

    // Add ASIN US Text field.
    $this->clickLink(t('Manage fields'));
    $edit = [
      'fields[_add_new_field][field_name]' => 'field_asin_us_text',
      'fields[_add_new_field][label]' => 'ASIN US Text',
      'fields[_add_new_field][type]' => 'asin',
      'fields[_add_new_field][widget_type]' => 'asin_text',
    ];
    $this->drupalPost(NULL, $edit, t('Save'));
    $edit = [
      'instance[widget][settings][widget_settings][locale]' => 'US',
    ];
    $this->drupalPost(NULL, $edit, t('Save field settings'));
    $this->drupalPost(NULL, array(), t('Save settings'));

    // Add ASIN UK Text field.
    $this->clickLink(t('Manage fields'));
    $edit = [
      'fields[_add_new_field][field_name]' => 'field_asin_uk_text',
      'fields[_add_new_field][label]' => 'ASIN UK Text',
      'fields[_add_new_field][type]' => 'asin',
      'fields[_add_new_field][widget_type]' => 'asin_text',
    ];
    $this->drupalPost(NULL, $edit, t('Save'));
    $edit = [
      'instance[widget][settings][widget_settings][locale]' => 'UK',
    ];
    $this->drupalPost(NULL, $edit, t('Save field settings'));
    $this->drupalPost(NULL, array(), t('Save settings'));

    // Add ASIN US Autocomplete field.
    $this->clickLink(t('Manage fields'));
    $edit = [
      'fields[_add_new_field][field_name]' => 'field_asin_us_auto',
      'fields[_add_new_field][label]' => 'ASIN US Autocomplete',
      'fields[_add_new_field][type]' => 'asin',
      'fields[_add_new_field][widget_type]' => 'asin_autocomplete',
    ];
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save field settings'));
    $edit = [
      'instance[widget][settings][widget_settings][locale]' => 'US',
    ];
    $this->drupalPost(NULL, $edit, t('Save settings'));

    // Add ASIN UK Autocomplete field.
    $this->clickLink(t('Manage fields'));
    $edit = [
      'fields[_add_new_field][field_name]' => 'field_asin_uk_auto',
      'fields[_add_new_field][label]' => 'ASIN UK Autocomplete',
      'fields[_add_new_field][type]' => 'asin',
      'fields[_add_new_field][widget_type]' => 'asin_autocomplete',
    ];
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save field settings'));
    $edit = [
      'instance[widget][settings][widget_settings][locale]' => 'UK',
    ];
    $this->drupalPost(NULL, $edit, t('Save settings'));

    return;



    // Create a node.
    $amazon_item = amazon_test_get_amazon_item();
    $node = $this->drupalCreateNode(
      array(
        'type' => 'article',
        'field_asin' => array(LANGUAGE_NONE => array(array('asin' => $amazon_item['asin'])))
      )
    );

    $test_styles = $this->amazon_test_get_amazon_styles();
    foreach ($test_styles as $style => $details) {

      // Change the field format.
      if ($instance = field_read_instance('node', 'field_asin', 'article')) {
        $instance['display']['default']['type'] = 'asin_' . $style;
        field_update_instance($instance);
      }

      // Test that the markup is correct.
      $this->drupalGet('node/' . $node->nid);
      $this->assertResponse(200);
      $this->assertRaw('ASIN:');

      // Test markup.
      $xpath = $details['xpath'];
      foreach ($xpath as $item) {
        $xpath_query = $item['query'];
        $xpath_values = $item['values'];

        // Fill in the value for style.
        if (isset($xpath_values[':style_class'])) {
          $xpath_values[':style_class'] = "amazon-item-$style";
        }
        $this->assertElementByXPath($xpath_query, $xpath_values, "Style '$style' was rendered correctly.");
      }
    }
  }
}
