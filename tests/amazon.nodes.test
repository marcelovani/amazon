<?php

/**
 * @file
 * Tests for amazon.module.
 */
class AmazonNodes extends DrupalWebTestCase {
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'Amazon nodes',
      'description' => 'Tests that Amazon nodes render correctly.',
      'group' => 'Amazon',
    );
  }

  //@todo move code to abvstrract class to be used by template test
  protected function setUp() {
    // Enable modules.
    parent::setUp('amazon', 'asin', 'node', 'field_ui', 'amazon_test');

    // Create Admin user.
    $this->admin_user = $this->drupalCreateUser(array(
        'administer content types',
        'administer nodes',
        'edit any article content',
        'administer fields',
      )
    );
    $this->drupalLogin($this->admin_user);

    // Generate and store an Id.
    $id = _amazon_test_random_id($this->randomString());

    // Module settings.
    variable_set('amazon_refresh_schedule', REQUEST_TIME + 3600);
    variable_set('amazon_aws_access_key', $id);
    variable_set('amazon_aws_secret_access_key', $id);
    variable_set('amazon_default_locale', 'US');
    variable_set('amazon_locale_US_associate_id', 'test-20');
  }

  /**
   * Check that an element exists in HTML markup.
   *
   * @param       $xpath
   *   An XPath expression.
   * @param array $arguments
   *   (optional) An associative array of XPath replacement tokens to pass to
   *   DrupalWebTestCase::buildXPathQuery().
   * @param       $message
   *   The message to display along with the assertion.
   * @param       $group
   *   The type of assertion - examples are "Browser", "PHP".
   *
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertElementByXPath($xpath, array $arguments = array(), $message, $group = 'Other') {
    $elements = $this->xpath($xpath, $arguments);

    return $this->assertTrue(!empty($elements[0]), $message, $group);
  }

  /**
   * Test the field formatters.
   */
  public function testFieldFormatters() {
    // Login as an admin user.
    $this->drupalLogin($this->admin_user);

    // Add ASIN field to the content type.
    _amazon_test_attach_fields();

    // Check UI
    $this->drupalGet('admin/structure/types/manage/article/fields');
    $this->assertRaw('ASIN');
    $this->assertRaw('field_asin');
    $this->assertLink('Amazon item');
    $this->assertLink('Amazon ASIN Text field');
    $this->drupalGet('admin/structure/types/manage/article/display');
    $this->assertRaw('ASIN');
    // Create a node.
    $amazon_item = _amazon_test_get_amazon_item();
    $node = $this->drupalCreateNode(
      array(
        'type' => 'article',
        'field_asin' => array(LANGUAGE_NONE => array(array('asin' => $amazon_item['asin'])))
      )
    );

    // @todo split into new function to be used by template test
    $test_styles = _amazon_test_get_amazon_styles_test();
    foreach ($test_styles as $style => $details) {

      // Change the field format.
      if ($instance = field_read_instance('node', 'field_asin', 'article')) {
        $instance['display']['default']['type'] = 'asin_' . $style;
        field_update_instance($instance);
      }

      // Test that the markup is correct.
      $this->drupalGet('node/' . $node->nid);
      $this->assertResponse(200);
      $this->assertRaw('ASIN:');

      // Test markup.
      $xpath = $details['xpath'];
      foreach ($xpath as $item) {
        $xpath_query = $item['query'];
        $xpath_values = $item['values'];

        // Fill in the value for style.
        if (isset($xpath_values[':style_class'])) {
          $xpath_values[':style_class'] = "amazon-item-$style";
        }
        $this->assertElementByXPath($xpath_query, $xpath_values, "Style '$style' was rendered correctly.");
      }
    }

    // Change display of the field... repeat

    return;

    // Enable Amazon display on article content.
    $this->drupalGet("admin/structure/types/manage/article/display");
    $this->assertResponse(200);
    $edit = ["view_modes_custom[amazon]" => '1'];
    $this->drupalPost(NULL, $edit, t('Save'));

    // Amazon version of node should be enabled by default.
    $this->drupalGet('node/' . $node->nid);
    $this->assertResponse(200);
    // Check amazonhtml link.
    $this->assertRaw('<link rel="amazonhtml"');
    // Visit amazon page.
    $this->drupalGet('node/' . $node->nid, array('query' => array('amazon' => TRUE)));
    $this->assertResponse(200);
    $this->assertText($node->body[LANGUAGE_NONE][0]['value']);
    // Check canonical link.
    $pattern = '|<link rel="canonical" href="http(.*):\/\/(.*)node\/1"\s\/>|';
    $this->assertPattern($pattern, 'Check that link rel="canonical" is present on the page.');

    // Edit the node and turn off Amazon.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertResponse(200);
    $edit = [
      'amazon_enabled' => FALSE,
    ];
    $this->drupalPost(NULL, $edit, t('Save'));

    // View node.
    $this->drupalGet('node/' . $node->nid);
    $this->assertResponse(200);
    // Check that amazonhtml link is not present.
    $pattern = '|<link rel="amazonhtml" href="http(.*):\/\/(.*)node\/1\?.*amazon"|';
    $this->assertNoPattern($pattern, 'Check that link rel="amazonhtml" is present on the page.');
  }

  /**
   * Test the input filters.
   */
  public function testInputFilters() {
  }
}
